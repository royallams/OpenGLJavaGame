#version 330 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;


out vec4 out_Color;

uniform vec3 lightColor;
uniform sampler2D textureSampler;
uniform float shineDamper;
uniform float reflectivity;

void main(){
    vec3 unitNormal = normalize(surfaceNormal);
    vec3 unitLightVector = normalize(toLightVector);

    float dot_prod = dot(unitNormal,unitLightVector);
    float brightness = max(dot_prod, 0);
    vec3 diffuse = brightness * lightColor;

    vec3 unitVectorToCamera = normalize(toCameraVector);
    vec3 lightDirection = -unitLightVector;
    vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);

    float specularFactor = dot(reflectedLightDirection,unitVectorToCamera);
    specularFactor = max(specularFactor, 0.0);
    float dampedFactor = pow(specularFactor , shineDamper);
    vec3 finalSpecular = dampedFactor * lightColor * reflectivity;

// Return the color of the pixel at the coordinate.. sample it at the texture coordinates.
    out_Color = vec4(diffuse,1.0) * texture(textureSampler, pass_textureCoords)+ vec4(finalSpecular,1.0);
}