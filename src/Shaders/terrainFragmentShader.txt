#version 330 core

in vec2 pass_textureCoordinates;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;


out vec4 out_Color;

uniform vec3 lightColor;
uniform sampler2D backgroundTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;



uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;

void main(){

    vec4 blendMapColor = texture(blendMap, pass_textureCoordinates);
    float backTextureAmount = 1-(blendMapColor.r + blendMapColor.g + blendMapColor.b);
    vec2 tiledCoordinates = pass_textureCoordinates *40.0;
    vec4 backgroundTextureColour = texture(backgroundTexture, tiledCoordinates) * backTextureAmount;
    vec4 rTextureColor = texture(rTexture, tiledCoordinates) * blendMapColor.r;
    vec4 gTextureColor = texture(gTexture, tiledCoordinates) * blendMapColor.g;
    vec4 bTextureColor = texture(bTexture, tiledCoordinates) * blendMapColor.b;

    vec4 totalColor = backgroundTextureColour+ rTextureColor + gTextureColor+ bTextureColor;

    vec3 unitNormal = normalize(surfaceNormal);
    vec3 unitLightVector = normalize(toLightVector);

    float dot_prod = dot(unitNormal,unitLightVector);
    float brightness = max(dot_prod, 0.9);
    vec3 diffuse = brightness * lightColor;

    vec3 unitVectorToCamera = normalize(toCameraVector);
    vec3 lightDirection = -unitLightVector;
    vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);

    float specularFactor = dot(reflectedLightDirection,unitVectorToCamera);
    specularFactor = max(specularFactor, 0.0);
    float dampedFactor = pow(specularFactor , shineDamper);
    vec3 finalSpecular = dampedFactor * lightColor * reflectivity;

// Return the color of the pixel at the coordinate. sample it at the texture coordinates.
    out_Color = vec4(diffuse,1.0) * totalColor + vec4(finalSpecular,1.0);

    out_Color = mix(vec4(skyColor,1.0),out_Color,visibility);

}